# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-
# vi: set ft=python sts=4 ts=4 sw=4 et:
#
# Copyright 2024 The NiPreps Developers <nipreps@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# We support and encourage derived works from this project, please read
# about our expectations at
#
#     https://www.nipreps.org/community/licensing/
#
"""
SimBIDS workflows
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. autofunction:: init_simbids_wf
.. autofunction:: init_single_subject_wf
.. autofunction:: init_single_run_wf

"""

import sys
from importlib import resources

import nipype.pipeline.engine as pe
import yaml
from niworkflows.engine.workflows import LiterateWorkflow as Workflow
from niworkflows.interfaces.bids import BIDSInfo

from simbids import config
from simbids.interfaces.bids import NiPrepsDerivativesDataSink
from simbids.interfaces.reportlets import AboutSummary, SubjectSummary
from simbids.utils.utils import _get_wf_name
from simbids.workflows.freesurfer import write_fs_files

text_file = resources.files('simbids').joinpath('data/text_file.txt')


def collect_data(layout, participant_label, session_id=None, filters=None):
    """Use pybids to retrieve the input data for a given participant."""

    from bids.layout import Query

    queries = {
        'fmap': {'datatype': 'fmap'},
        'sbref': {'datatype': 'func', 'suffix': 'sbref'},
        'flair': {'datatype': 'anat', 'suffix': 'FLAIR'},
        't2w': {'datatype': 'anat', 'suffix': 'T2w'},
        't1w': {'datatype': 'anat', 'suffix': 'T1w'},
        'roi': {'datatype': 'anat', 'suffix': 'roi'},
        'bold': {'datatype': 'func', 'suffix': 'bold'},
    }
    bids_filters = filters or {}
    for acq in queries.keys():
        entities = bids_filters.get(acq, {})

        if ('session' in entities.keys()) and (session_id is not None):
            config.loggers.workflow.warning(
                'BIDS filter file value for session may conflict with values specified '
                'on the command line'
            )
        queries[acq]['session'] = session_id or Query.OPTIONAL
        queries[acq].update(entities)

    subj_data = {
        dtype: sorted(
            layout.get(
                return_type='file',
                subject=participant_label,
                extension=['nii', 'nii.gz'],
                **query,
            )
        )
        for dtype, query in queries.items()
    }

    config.loggers.workflow.log(
        25,
        f'Collected data:\n{yaml.dump(subj_data, default_flow_style=False, indent=4)}',
    )

    return subj_data


def init_single_subject_fmriprep_wf(subject_id: str):
    """Organize the postprocessing pipeline for a single subject."""

    workflow = Workflow(name=f'sub_{subject_id}_wf')
    workflow.__desc__ = f"""
Results included in this manuscript come from postprocessing
performed using *SimBIDS* {config.environment.version},
which is based on *Nipype* {config.environment.nipype_version}
(@nipype1; @nipype2; RRID:SCR_002502).

"""
    workflow.__postdesc__ = """

For more details of the pipeline, see [the section corresponding
to workflows in *SimBIDS*'s documentation]\
(https://simbids.readthedocs.io/en/latest/workflows.html).


### Copyright Waiver

The above boilerplate text was automatically generated by SimBIDS
with the express intention that users should copy and paste this
text into their manuscripts *unchanged*.
It is released under the
[CC0](https://creativecommons.org/publicdomain/zero/1.0/) license.

### References

"""
    spaces = config.workflow.spaces
    subject_data = collect_data(config.execution.layout, subject_id)
    # Make sure we always go through these two checks
    if not subject_data['bold']:
        raise RuntimeError(
            f'No bold images found for participant {subject_id}. '
            f'Please check your BIDS filters: {config.execution.bids_filters}.'
        )

    config.loggers.workflow.info(
        f'Collected subject data:\n{yaml.dump(subject_data, default_flow_style=False, indent=4)}',
    )

    bids_info = pe.Node(
        BIDSInfo(
            bids_dir=config.execution.bids_dir,
            bids_validate=False,
            in_file=subject_data['bold'][0],
        ),
        name='bids_info',
    )

    summary = pe.Node(
        SubjectSummary(
            bold=subject_data['bold'],
            std_spaces=spaces.get_spaces(nonstandard=False),
            nstd_spaces=spaces.get_spaces(standard=False),
        ),
        name='summary',
        run_without_submitting=True,
    )
    workflow.connect([(bids_info, summary, [('subject', 'subject_id')])])

    about = pe.Node(
        AboutSummary(version=config.environment.version, command=' '.join(sys.argv)),
        name='about',
        run_without_submitting=True,
    )

    ds_report_summary = pe.Node(
        NiPrepsDerivativesDataSink(
            source_file=subject_data['bold'][0],
            base_directory=config.execution.output_dir,
            desc='summary',
            datatype='figures',
        ),
        name='ds_report_summary',
        run_without_submitting=True,
    )
    workflow.connect([(summary, ds_report_summary, [('out_report', 'in_file')])])

    ds_report_about = pe.Node(
        NiPrepsDerivativesDataSink(
            source_file=subject_data['bold'][0],
            base_directory=config.execution.output_dir,
            desc='about',
            datatype='figures',
        ),
        name='ds_report_about',
        run_without_submitting=True,
    )
    workflow.connect([(about, ds_report_about, [('out_report', 'in_file')])])

    # Append the functional section to the existing anatomical excerpt
    # That way we do not need to stream down the number of bold datasets
    bold_pre_desc = f"""
fMRI data postprocessing

: For each of the {len(subject_data['bold'])} bold runs found per subject
(across all sessions), these files were copied into the output directory.
"""
    workflow.__desc__ += bold_pre_desc

    anat_file = (subject_data['t1w'] + subject_data['t2w'])[0]
    workflow.add_nodes(_get_smriprep_datasinks(anat_file))

    if config.workflow.anat_only:
        write_fs_files(config.execution.output_dir, subject_id)
        workflow.add_nodes(_get_bold_datasinks(subject_data['bold'][0]))
        return clean_datasinks(workflow)

    for bold_file in subject_data['bold']:
        workflow.add_nodes(_get_bold_datasinks(bold_file))
    return clean_datasinks(workflow)


def _get_bold_datasinks(source_file):
    return [
        # Native space outputs
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                desc='preproc',
                suffix='bold',
                extension='.nii.gz',
            ),
            name=_get_wf_name(source_file, 'ds_bold_t1w'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                desc='brain',
                suffix='mask',
                extension='.nii.gz',
            ),
            name=_get_wf_name(source_file, 'ds_bold_t1w_mask'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                suffix='boldref',
                extension='.nii.gz',
            ),
            name=_get_wf_name(source_file, 'ds_bold_t1w_boldref'),
            run_without_submitting=True,
        ),
        # MNI space outputs
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin6Asym',
                res='2',
                desc='preproc',
                suffix='bold',
                extension='.nii.gz',
            ),
            name=_get_wf_name(source_file, 'ds_bold_mni'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin6Asym',
                res='2',
                desc='brain',
                suffix='mask',
                extension='.nii.gz',
            ),
            name=_get_wf_name(source_file, 'ds_bold_mni_mask'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin6Asym',
                res='2',
                suffix='boldref',
                extension='.nii.gz',
            ),
            name=_get_wf_name(source_file, 'ds_bold_mni_boldref'),
            run_without_submitting=True,
        ),
        # fsLR space outputs
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='fsLR',
                den='91k',
                suffix='bold',
                extension='.dtseries.nii',
            ),
            name=_get_wf_name(source_file, 'ds_bold_fslr'),
            run_without_submitting=True,
        ),
        # Coregistration outputs
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                desc='coreg',
                suffix='boldref',
                extension='.nii.gz',
            ),
            name=_get_wf_name(source_file, 'ds_bold_coreg_boldref'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                to='T1w',
                mode='image',
                desc='coreg',
                suffix='xfm',
                extension='.txt',
                **{'from': 'boldref'},
            ),
            name=_get_wf_name(source_file, 'ds_bold_coreg_xfm'),
            run_without_submitting=True,
        ),
        # Head motion correction outputs
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                desc='hmc',
                suffix='boldref',
                extension='.nii.gz',
            ),
            name=_get_wf_name(source_file, 'ds_bold_hmc_boldref'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                to='boldref',
                mode='image',
                desc='hmc',
                suffix='xfm',
                extension='.txt',
                **{'from': 'orig'},
            ),
            name=_get_wf_name(source_file, 'ds_bold_hmc_xfm'),
            run_without_submitting=True,
        ),
        # Fieldmap registration outputs
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                to='phasesfmap0',
                mode='image',
                suffix='xfm',
                extension='.txt',
                **{'from': 'boldref'},
            ),
            name=_get_wf_name(source_file, 'ds_bold_fmap_xfm'),
            run_without_submitting=True,
        ),
        # Confounds outputs
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                desc='confounds',
                suffix='timeseries',
                extension='.tsv',
            ),
            name=_get_wf_name(source_file, 'ds_bold_confounds'),
            run_without_submitting=True,
        ),
    ]


def _get_smriprep_datasinks(source_file):
    return [
        # T1w preprocessed image and brain mask in native space
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                desc='preproc',
                suffix='T1w',
                extension='.nii.gz',
            ),
            name=_get_wf_name(source_file, 'ds_anat_t1'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                desc='brain',
                suffix='mask',
                extension='.nii.gz',
            ),
            name=_get_wf_name(source_file, 'ds_anat_brainmask'),
            run_without_submitting=True,
        ),
        # Ribbon mask
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                desc='ribbon',
                suffix='mask',
                extension='.nii.gz',
            ),
            name=_get_wf_name(source_file, 'ds_anat_ribbon'),
            run_without_submitting=True,
        ),
        # Segmentation files
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                suffix='dseg',
                extension='.nii.gz',
            ),
            name=_get_wf_name(source_file, 'ds_anat_dseg'),
            run_without_submitting=True,
        ),
        # Probability segmentations
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                label='CSF',
                suffix='probseg',
                extension='.nii.gz',
            ),
            name=_get_wf_name(source_file, 'ds_anat_csf'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                label='GM',
                suffix='probseg',
                extension='.nii.gz',
            ),
            name=_get_wf_name(source_file, 'ds_anat_gm'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                label='WM',
                suffix='probseg',
                extension='.nii.gz',
            ),
            name=_get_wf_name(source_file, 'ds_anat_wm'),
            run_without_submitting=True,
        ),
        # MNI space outputs
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin6Asym',
                desc='preproc',
                suffix='T1w',
                extension='.nii.gz',
            ),
            name=_get_wf_name(source_file, 'ds_anat_mni_t1'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin6Asym',
                desc='brain',
                suffix='mask',
                extension='.nii.gz',
            ),
            name=_get_wf_name(source_file, 'ds_anat_mni_brainmask'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin6Asym',
                suffix='dseg',
                extension='.nii.gz',
            ),
            name=_get_wf_name(source_file, 'ds_anat_mni_dseg'),
            run_without_submitting=True,
        ),
        # Transforms
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                to='T1w',
                mode='image',
                suffix='xfm',
                extension='.h5',
                datatype='anat',
                **{'from': 'MNI152NLin2009cAsym'},
            ),
            name=_get_wf_name(source_file, 'ds_anat_mni2009c_to_t1w'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                to='T1w',
                mode='image',
                suffix='xfm',
                extension='.h5',
                datatype='anat',
                **{'from': 'MNI152NLin6Asym'},
            ),
            name=_get_wf_name(source_file, 'ds_anat_mni6_to_t1w'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                to='MNI152NLin2009cAsym',
                mode='image',
                suffix='xfm',
                extension='.h5',
                datatype='anat',
                **{'from': 'T1w'},
            ),
            name=_get_wf_name(source_file, 'ds_anat_t1w_to_mni2009c'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                to='MNI152NLin6Asym',
                mode='image',
                suffix='xfm',
                extension='.h5',
                datatype='anat',
                **{'from': 'T1w'},
            ),
            name=_get_wf_name(source_file, 'ds_anat_t1w_to_mni6'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                to='fsnative',
                mode='image',
                suffix='xfm',
                extension='.txt',
                datatype='anat',
                **{'from': 'T1w'},
            ),
            name=_get_wf_name(source_file, 'ds_anat_t1w_to_fsnative'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                to='T1w',
                mode='image',
                suffix='xfm',
                extension='.txt',
                datatype='anat',
                **{'from': 'fsnative'},
            ),
            name=_get_wf_name(source_file, 'ds_anat_fsnative_to_t1w'),
            run_without_submitting=True,
        ),
        # Surface files
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                hemi='L',
                suffix='midthickness',
                extension='.surf.gii',
            ),
            name=_get_wf_name(source_file, 'ds_anat_lh_midthickness'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                hemi='R',
                suffix='midthickness',
                extension='.surf.gii',
            ),
            name=_get_wf_name(source_file, 'ds_anat_rh_midthickness'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                hemi='L',
                suffix='pial',
                extension='.surf.gii',
            ),
            name=_get_wf_name(source_file, 'ds_anat_lh_pial'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                hemi='R',
                suffix='pial',
                extension='.surf.gii',
            ),
            name=_get_wf_name(source_file, 'ds_anat_rh_pial'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                hemi='L',
                suffix='white',
                extension='.surf.gii',
            ),
            name=_get_wf_name(source_file, 'ds_anat_lh_white'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                hemi='R',
                suffix='white',
                extension='.surf.gii',
            ),
            name=_get_wf_name(source_file, 'ds_anat_rh_white'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                hemi='L',
                suffix='sphere',
                extension='.surf.gii',
            ),
            name=_get_wf_name(source_file, 'ds_anat_lh_sphere'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                hemi='R',
                suffix='sphere',
                extension='.surf.gii',
            ),
            name=_get_wf_name(source_file, 'ds_anat_rh_sphere'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                hemi='L',
                suffix='sulc',
                extension='.shape.gii',
            ),
            name=_get_wf_name(source_file, 'ds_anat_lh_sulc'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                hemi='R',
                suffix='sulc',
                extension='.shape.gii',
            ),
            name=_get_wf_name(source_file, 'ds_anat_rh_sulc'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                hemi='L',
                suffix='thickness',
                extension='.shape.gii',
            ),
            name=_get_wf_name(source_file, 'ds_anat_lh_thickness'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='T1w',
                hemi='R',
                suffix='thickness',
                extension='.shape.gii',
            ),
            name=_get_wf_name(source_file, 'ds_anat_rh_thickness'),
            run_without_submitting=True,
        ),
        # fsLR space outputs
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='fsLR',
                den='91k',
                suffix='curv',
                extension='.dscalar.nii',
            ),
            name=_get_wf_name(source_file, 'ds_anat_fslr_curv'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='fsLR',
                den='91k',
                suffix='sulc',
                extension='.dscalar.nii',
            ),
            name=_get_wf_name(source_file, 'ds_anat_fslr_sulc'),
            run_without_submitting=True,
        ),
        pe.Node(
            NiPrepsDerivativesDataSink(
                source_file=source_file,
                in_file=source_file,
                base_directory=config.execution.output_dir,
                space='fsLR',
                den='91k',
                suffix='thickness',
                extension='.dscalar.nii',
            ),
            name=_get_wf_name(source_file, 'ds_anat_fslr_thickness'),
            run_without_submitting=True,
        ),
    ]


def clean_datasinks(workflow: pe.Workflow) -> pe.Workflow:
    """Overwrite ``out_path_base`` of DataSinks."""
    for node in workflow.list_node_names():
        if node.split('.')[-1].startswith('ds_'):
            workflow.get_node(node).interface.out_path_base = ''
    return workflow
