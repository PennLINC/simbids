# emacs: -*- mode: python; py-indent-offset: 4; indent-tabs-mode: nil -*-
# vi: set ft=python sts=4 ts=4 sw=4 et:
#
# Copyright 2024 The NiPreps Developers <nipreps@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# We support and encourage derived works from this project, please read
# about our expectations at
#
#     https://www.nipreps.org/community/licensing/
#
"""
SimBIDS workflows
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. autofunction:: init_simbids_wf
.. autofunction:: init_single_subject_wf
.. autofunction:: init_single_run_wf

"""

import sys
from importlib import resources

import nipype.pipeline.engine as pe
import yaml
from niworkflows.engine.workflows import LiterateWorkflow as Workflow
from niworkflows.interfaces.bids import BIDSInfo

from simbids import config
from simbids.interfaces.bids import XCPDDerivativesDataSink as DerivativesDataSink
from simbids.interfaces.reportlets import AboutSummary, SubjectSummary
from simbids.utils.utils import _get_wf_name

text_file = resources.files('simbids').joinpath('data/text_file.txt')


def collect_data(layout, participant_label, session_id=None, filters=None):
    """Use pybids to retrieve the input data for a given participant."""

    from bids.layout import Query

    queries = {
        'fmap': {'datatype': 'fmap'},
        'sbref': {'datatype': 'func', 'suffix': 'sbref'},
        'flair': {'datatype': 'anat', 'suffix': 'FLAIR'},
        't2w': {'datatype': 'anat', 'suffix': 'T2w'},
        't1w': {'datatype': 'anat', 'suffix': 'T1w'},
        'roi': {'datatype': 'anat', 'suffix': 'roi'},
        'bold': {'datatype': 'func', 'suffix': 'bold'},
    }
    bids_filters = filters or {}
    for acq in queries.keys():
        entities = bids_filters.get(acq, {})

        if ('session' in entities.keys()) and (session_id is not None):
            config.loggers.workflow.warning(
                'BIDS filter file value for session may conflict with values specified '
                'on the command line'
            )
        queries[acq]['session'] = session_id or Query.OPTIONAL
        queries[acq].update(entities)

    subj_data = {
        dtype: sorted(
            layout.get(
                return_type='file',
                subject=participant_label,
                extension=['nii', 'nii.gz'],
                **query,
            )
        )
        for dtype, query in queries.items()
    }

    config.loggers.workflow.log(
        25,
        f'Collected data:\n{yaml.dump(subj_data, default_flow_style=False, indent=4)}',
    )

    return subj_data


def init_single_subject_xcp_d_wf(subject_id: str):
    """Organize the postprocessing pipeline for a single subject."""
    from bids.utils import listify

    entities = config.execution.bids_filters or {}
    entities['subject'] = subject_id

    # Just build a list of BOLD files right now
    subject_data = collect_data(config.execution.layout, subject_id)
    subject_data['bold'] = listify(subject_data['bold'])

    workflow = Workflow(name=f'sub_{subject_id}_wf')
    workflow.__desc__ = f"""
Results included in this manuscript come from postprocessing
performed using *SimBIDS* {config.environment.version},
which is based on *Nipype* {config.environment.nipype_version}
(@nipype1; @nipype2; RRID:SCR_002502).

"""
    workflow.__postdesc__ = """

For more details of the pipeline, see [the section corresponding
to workflows in *SimBIDS*'s documentation]\
(https://simbids.readthedocs.io/en/latest/workflows.html).


### Copyright Waiver

The above boilerplate text was automatically generated by SimBIDS
with the express intention that users should copy and paste this
text into their manuscripts *unchanged*.
It is released under the
[CC0](https://creativecommons.org/publicdomain/zero/1.0/) license.

### References

"""
    spaces = config.workflow.spaces

    # Make sure we always go through these two checks
    if not subject_data['bold']:
        task_id = config.execution.task_id
        raise RuntimeError(
            f'No BOLD images found for participant {subject_id} and '
            f'task {task_id if task_id else "<all>"}. '
            'All workflows require BOLD images. '
            f'Please check your BIDS filters: {config.execution.bids_filters}.'
        )

    config.loggers.workflow.info(
        f'Collected subject data:\n{yaml.dump(subject_data, default_flow_style=False, indent=4)}',
    )

    bids_info = pe.Node(
        BIDSInfo(
            bids_dir=config.execution.bids_dir,
            bids_validate=False,
            in_file=subject_data['bold'][0],
        ),
        name='bids_info',
    )

    summary = pe.Node(
        SubjectSummary(
            bold=subject_data['bold'],
            std_spaces=spaces.get_spaces(nonstandard=False),
            nstd_spaces=spaces.get_spaces(standard=False),
        ),
        name='summary',
        run_without_submitting=True,
    )
    workflow.connect([(bids_info, summary, [('subject', 'subject_id')])])

    about = pe.Node(
        AboutSummary(version=config.environment.version, command=' '.join(sys.argv)),
        name='about',
        run_without_submitting=True,
    )

    ds_report_summary = pe.Node(
        DerivativesDataSink(
            source_file=subject_data['bold'][0],
            base_directory=config.execution.output_dir,
            desc='summary',
            datatype='figures',
        ),
        name='ds_report_summary',
        run_without_submitting=True,
    )
    workflow.connect([(summary, ds_report_summary, [('out_report', 'in_file')])])

    ds_report_about = pe.Node(
        DerivativesDataSink(
            source_file=subject_data['bold'][0],
            base_directory=config.execution.output_dir,
            desc='about',
            datatype='figures',
        ),
        name='ds_report_about',
        run_without_submitting=True,
    )
    workflow.connect([(about, ds_report_about, [('out_report', 'in_file')])])

    # Append the functional section to the existing anatomical excerpt
    # That way we do not need to stream down the number of bold datasets
    func_pre_desc = f"""
Functional data postprocessing

: For each of the {len(subject_data['bold'])} BOLD runs found per subject
(across all tasks and sessions), the following postprocessing was performed.
"""
    workflow.__desc__ += func_pre_desc

    anat_file = (subject_data['t1w'] + subject_data['t2w'])[0]
    workflow.add_nodes(_get_anat_datasinks(anat_file))
    for bold_file in subject_data['bold']:
        workflow.add_nodes(_get_bold_datasinks(bold_file))

    return clean_datasinks(workflow)


def _get_anat_datasinks(anat_file: str):
    return [
        # Preprocessed T1w image
        pe.Node(
            DerivativesDataSink(
                source_file=anat_file,
                in_file=anat_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin6Asym',
                desc='preproc',
                suffix='T1w',
                extension='.nii.gz',
                datatype='anat',
                acquisition='refaced',
            ),
            name=_get_wf_name(anat_file, 'ds_anat_t1w_preproc'),
            run_without_submitting=True,
        ),
        # Left hemisphere surface files
        pe.Node(
            DerivativesDataSink(
                source_file=anat_file,
                in_file=anat_file,
                base_directory=config.execution.output_dir,
                space='fsLR',
                hemi='L',
                density='32k',
                desc='hcp',
                suffix='inflated',
                extension='.surf.gii',
                datatype='anat',
                acquisition='refaced',
            ),
            name=_get_wf_name(anat_file, 'ds_anat_lh_inflated'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=anat_file,
                in_file=anat_file,
                base_directory=config.execution.output_dir,
                space='fsLR',
                hemi='L',
                density='32k',
                desc='hcp',
                suffix='midthickness',
                extension='.surf.gii',
                datatype='anat',
                acquisition='refaced',
            ),
            name=_get_wf_name(anat_file, 'ds_anat_lh_midthickness'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=anat_file,
                in_file=anat_file,
                base_directory=config.execution.output_dir,
                space='fsLR',
                hemi='L',
                density='32k',
                desc='hcp',
                suffix='vinflated',
                extension='.surf.gii',
                datatype='anat',
                acquisition='refaced',
            ),
            name=_get_wf_name(anat_file, 'ds_anat_lh_vinflated'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=anat_file,
                in_file=anat_file,
                base_directory=config.execution.output_dir,
                space='fsLR',
                hemi='L',
                density='32k',
                suffix='pial',
                extension='.surf.gii',
                datatype='anat',
                acquisition='refaced',
            ),
            name=_get_wf_name(anat_file, 'ds_anat_lh_pial'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=anat_file,
                in_file=anat_file,
                base_directory=config.execution.output_dir,
                space='fsLR',
                hemi='L',
                density='32k',
                suffix='white',
                extension='.surf.gii',
                datatype='anat',
                acquisition='refaced',
            ),
            name=_get_wf_name(anat_file, 'ds_anat_lh_white'),
            run_without_submitting=True,
        ),
        # Right hemisphere surface files
        pe.Node(
            DerivativesDataSink(
                source_file=anat_file,
                in_file=anat_file,
                base_directory=config.execution.output_dir,
                space='fsLR',
                hemi='R',
                density='32k',
                desc='hcp',
                suffix='inflated',
                extension='.surf.gii',
                datatype='anat',
                acquisition='refaced',
            ),
            name=_get_wf_name(anat_file, 'ds_anat_rh_inflated'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=anat_file,
                in_file=anat_file,
                base_directory=config.execution.output_dir,
                space='fsLR',
                hemi='R',
                density='32k',
                desc='hcp',
                suffix='midthickness',
                extension='.surf.gii',
                datatype='anat',
                acquisition='refaced',
            ),
            name=_get_wf_name(anat_file, 'ds_anat_rh_midthickness'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=anat_file,
                in_file=anat_file,
                base_directory=config.execution.output_dir,
                space='fsLR',
                hemi='R',
                density='32k',
                desc='hcp',
                suffix='vinflated',
                extension='.surf.gii',
                datatype='anat',
                acquisition='refaced',
            ),
            name=_get_wf_name(anat_file, 'ds_anat_rh_vinflated'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=anat_file,
                in_file=anat_file,
                base_directory=config.execution.output_dir,
                space='fsLR',
                hemi='R',
                density='32k',
                suffix='pial',
                extension='.surf.gii',
                datatype='anat',
                acquisition='refaced',
            ),
            name=_get_wf_name(anat_file, 'ds_anat_rh_pial'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=anat_file,
                in_file=anat_file,
                base_directory=config.execution.output_dir,
                space='fsLR',
                hemi='R',
                density='32k',
                suffix='white',
                extension='.surf.gii',
                datatype='anat',
                acquisition='refaced',
            ),
            name=_get_wf_name(anat_file, 'ds_anat_rh_white'),
            run_without_submitting=True,
        ),
        # Scalar files
        pe.Node(
            DerivativesDataSink(
                source_file=anat_file,
                in_file=anat_file,
                base_directory=config.execution.output_dir,
                space='fsLR',
                density='91k',
                suffix='curv',
                extension='.dscalar.nii',
                datatype='anat',
                acquisition='refaced',
            ),
            name=_get_wf_name(anat_file, 'ds_anat_curv'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=anat_file,
                in_file=anat_file,
                base_directory=config.execution.output_dir,
                space='fsLR',
                density='91k',
                suffix='sulc',
                extension='.dscalar.nii',
                datatype='anat',
                acquisition='refaced',
            ),
            name=_get_wf_name(anat_file, 'ds_anat_sulc'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=anat_file,
                in_file=anat_file,
                base_directory=config.execution.output_dir,
                space='fsLR',
                density='91k',
                suffix='thickness',
                extension='.dscalar.nii',
                datatype='anat',
                acquisition='refaced',
            ),
            name=_get_wf_name(anat_file, 'ds_anat_thickness'),
            run_without_submitting=True,
        ),
        # Morphology statistics
        pe.Node(
            DerivativesDataSink(
                source_file=anat_file,
                in_file=text_file,
                base_directory=config.execution.output_dir,
                space='fsLR',
                seg='MyersLabonte',
                statistic='mean',
                desc='curv',
                suffix='morph',
                extension='.tsv',
                datatype='anat',
                acquisition='refaced',
            ),
            name=_get_wf_name(anat_file, 'ds_anat_curv_morph'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=anat_file,
                in_file=text_file,
                base_directory=config.execution.output_dir,
                space='fsLR',
                seg='MyersLabonte',
                statistic='mean',
                desc='sulc',
                suffix='morph',
                extension='.tsv',
                datatype='anat',
                acquisition='refaced',
            ),
            name=_get_wf_name(anat_file, 'ds_anat_sulc_morph'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=anat_file,
                in_file=text_file,
                base_directory=config.execution.output_dir,
                space='fsLR',
                seg='MyersLabonte',
                statistic='mean',
                desc='thickness',
                suffix='morph',
                extension='.tsv',
                datatype='anat',
                acquisition='refaced',
            ),
            name=_get_wf_name(anat_file, 'ds_anat_thickness_morph'),
            run_without_submitting=True,
        ),
    ]


def _get_bold_datasinks(bold_file: str):
    return [
        # Denoised and smoothed BOLD images
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=bold_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                desc='denoisedSmoothed',
                suffix='bold',
                extension='.nii.gz',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_denoised_smoothed'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=bold_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                desc='denoised',
                suffix='bold',
                extension='.nii.gz',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_denoised'),
            run_without_submitting=True,
        ),
        # QC files
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=text_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                desc='linc',
                suffix='qc',
                extension='.tsv',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_linc_qc'),
            run_without_submitting=True,
        ),
        # 4S156Parcels outputs
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=bold_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                seg='4S156Parcels',
                statistic='coverage',
                suffix='bold',
                extension='.json',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_4s156_coverage_json'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=text_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                seg='4S156Parcels',
                statistic='coverage',
                suffix='bold',
                extension='.tsv',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_4s156_coverage_tsv'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=bold_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                seg='4S156Parcels',
                statistic='mean',
                suffix='timeseries',
                extension='.json',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_4s156_mean_ts_json'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=text_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                seg='4S156Parcels',
                statistic='mean',
                suffix='timeseries',
                extension='.tsv',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_4s156_mean_ts_tsv'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=bold_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                seg='4S156Parcels',
                statistic='pearsoncorrelation',
                suffix='relmat',
                extension='.json',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_4s156_corr_json'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=text_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                seg='4S156Parcels',
                statistic='pearsoncorrelation',
                suffix='relmat',
                extension='.tsv',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_4s156_corr_tsv'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=bold_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                seg='4S156Parcels',
                statistic='reho',
                suffix='bold',
                extension='.json',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_4s156_reho_json'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=text_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                seg='4S156Parcels',
                statistic='reho',
                suffix='bold',
                extension='.tsv',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_4s156_reho_tsv'),
            run_without_submitting=True,
        ),
        # Schaefer100 outputs
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=bold_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                seg='Schaefer100',
                statistic='coverage',
                suffix='bold',
                extension='.json',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_schaefer_coverage_json'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=text_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                seg='Schaefer100',
                statistic='coverage',
                suffix='bold',
                extension='.tsv',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_schaefer_coverage_tsv'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=bold_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                seg='Schaefer100',
                statistic='mean',
                suffix='timeseries',
                extension='.json',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_schaefer_mean_ts_json'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=text_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                seg='Schaefer100',
                statistic='mean',
                suffix='timeseries',
                extension='.tsv',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_schaefer_mean_ts_tsv'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=bold_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                seg='Schaefer100',
                statistic='pearsoncorrelation',
                suffix='relmat',
                extension='.json',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_schaefer_corr_json'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=text_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                seg='Schaefer100',
                statistic='pearsoncorrelation',
                suffix='relmat',
                extension='.tsv',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_schaefer_corr_tsv'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=bold_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                seg='Schaefer100',
                statistic='reho',
                suffix='bold',
                extension='.json',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_schaefer_reho_json'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=text_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                seg='Schaefer100',
                statistic='reho',
                suffix='bold',
                extension='.tsv',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_schaefer_reho_tsv'),
            run_without_submitting=True,
        ),
        # ReHo maps
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=bold_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                statistic='reho',
                suffix='boldmap',
                extension='.json',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_reho_map_json'),
            run_without_submitting=True,
        ),
        pe.Node(
            DerivativesDataSink(
                source_file=bold_file,
                in_file=bold_file,
                base_directory=config.execution.output_dir,
                space='MNI152NLin2009cAsym',
                statistic='reho',
                suffix='boldmap',
                extension='.nii.gz',
                datatype='func',
            ),
            name=_get_wf_name(bold_file, 'ds_bold_reho_map_nii'),
            run_without_submitting=True,
        ),
    ]


def clean_datasinks(workflow: pe.Workflow) -> pe.Workflow:
    """Overwrite ``out_path_base`` of DataSinks."""
    for node in workflow.list_node_names():
        if node.split('.')[-1].startswith('ds_'):
            workflow.get_node(node).interface.out_path_base = ''
    return workflow
